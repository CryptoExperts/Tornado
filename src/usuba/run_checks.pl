#!/usr/bin/perl

=head1 Description

    This scripts checks that the code generated by Usuba for the
    ciphers DES (bitslice), AES (bitslice/hslice), Serpent (vslice)
    and Chacha20 (vslice) are correct.

    All the work is actually handed to the scripts of
    checks/correctness, but they all do similar things: they compile
    the Usuba source, link the resulting C file with a runtime, and
    compare the output they produce with a reference implementation
    (or a reference output in the case of Chacha20).

=cut

use strict;
use warnings;
use v5.14;

use Cwd;
use File::Path qw( remove_tree );
use File::Copy;
use FindBin;

sub error {
    say "************ ERROR **************\n\n";
    exit 1;
}

# switching to usuba dir
chdir $FindBin::Bin;

say "-----------------------------------------------------------------------";
say "-------------------------------- Compiling ----------------------------";
say "-----------------------------------------------------------------------";
error if system 'make';
say "\n";


my %status;
say "\n\n-----------------------------------------------------------------------";
say "---------------------- Correctness verifications ----------------------";
say "-----------------------------------------------------------------------\n\n";
for my $test (glob('checks/correctness/*.pl')) {
    if (system("./$test 1") != 0) {
        $status{$test} = 0;
    } else {
        $status{$test} = 1;
    }
}

say "\n\n-----------------------------------------------------------------------";
say "-------------------------------- Results ------------------------------";
say "-----------------------------------------------------------------------\n";
for (keys %status) {
    if ($status{$_} == 0) {
        say "failed.... $_";
    } else {
        say "OK........ $_";
    }
}
my $n_fails = grep { $status{$_} == 0 } keys %status;
my $n_ok    = grep { $status{$_} == 1 } keys %status;
my $n_total = keys %status;

print "\n";
printf " %2d / %d test%s failed.\n", $n_fails, $n_total, $n_fails > 1 ? "s" : " ";
printf " %2d / %d test%s succeeded.\n", $n_ok, $n_total, $n_ok    > 1 ? "s" : " ";
print "\n";
